#!/usr/bin/env python3
#
# megabackup - a program to remotely back up your data to MEGA.nz's file
# hosting service.
#
#   This is Free Software licensed under the terms and conditions of the
#   GNU GPL v3. For more information see LICENSE or access:
#   https://gnu.org/licenses
#

'''
megabackup - a program to remotely back up your data to MEGA.nz's file
hosting service.

USAGE: megabackup LOCALFILES

Requires mega.py to work, installable through pip as:
    pip install mega.py
'''

import os
import sys
import json
from getpass import getpass

try:
    from mega import Mega
except ImportError:
    print('''This program requires mega.py to work.
Install it through pip as follows before running again:
    pip install mega.py
    ''')
    sys.exit(1)

# Configuration file, containing two lines for username and password:
CONFIG = os.environ['HOME'] + "/.config/megabackuprc"

# A few program-wide variables:
PUBLIC = False
FILES = []

def helper():
    print('''megabackup - a program to remotely back up your data to MEGA.nz's file
hosting service.

USAGE: megabackup [-p] [-h] FILE1 FILE2 ... FILEN

Where:
    -p: makes the uploaded files public (available through a shareable link)
    -h: prints this help message

If no REMOTE DIRECTORY is specified, uploads to directory root (/)

Requires mega.py to work, installable through pip as:

    pip install mega.py
    ''')

def getcreds():
    '''
    Parses CONFIG to figure out user credentials for MEGA

    Returns a tuple with (username,password), or empty if error
    '''
    global CONFIG
    contents = ''

    try:
        with open(CONFIG, 'r') as config:
            contents = json.loads(config.read())

    except FileNotFoundError:
        print("""Error: config file %s not found. 
Please create it in this format:
{
    "username": "YOUREMAILADDRESS@example.com",
    "password": "YOURPASSWORD"
}
        """ % CONFIG)
        sys.exit(1)

    username = contents["username"]
    password = contents["password"]

    return (username, password)


def parse():
    '''
    Sort through available options and command-line arguments.
    '''
    global FILES
    global PUBLIC
    args = sys.argv

    # received argument list is like ['megabackup','arg1','arg2'...]
    args.reverse()
    args.pop()
    
    while len(args) > 0:
        argument = args.pop()
        if argument == '-p':
            PUBLIC = True
        elif argument == '-h':
            helper()
            sys.exit(0)
        else:
            if argument[0] == "-":
                print("Error: unknown option '%s'" % argument)
                helper()
                sys.exit(1)
            else:
                # Assume that anything without a '-' is a file
                FILES.append(argument)
    
    # Before we do anything with the files, just ensure they exist...
    for item in FILES:
        try:
            with open(item, 'r') as testfile:
                pass

        except IsADirectoryError:
            # we will warn at upload time.
            # print("Warning: cannot upload directory %s" % item)
            pass

        except FileNotFoundError:
            print("Error: file %s not found." % item)
            sys.exit(1)


def login(mega, username, password):
    '''
    Returns a "session" object with which you can control things inside MEGA
    
    mega is an instance of Mega() class.
    username is the email address associated with your MEGA acount.
    password is the password for said account.

    Raises some kind of RequestError when login fails (wrong username or password)
    '''
    try:
        m = mega.login(username, password)
        print("Login successful.")
        return m

    except: # Hard to catch this specific exception, so here we go...
        print("Error: email address or password incorrect")
        sys.exit(1)


def upload(m, filename, folder = None, public = False):
    '''
    Uploads filename into the directory root of the MEGA account, with an
    optional public link (for sharing, etc)

    Sorry, cannot upload directories yet.

    Returns True if the upload is successful, False otherwise.
    '''
    if os.path.isdir(filename):
        print("Skipping directory %s for now..." % filename)
        return

    filesize = os.stat(filename).st_size

    if filesize > 1000000:
        print("Uploading %s (%.2f MB)..." % (filename, (filesize / 1000000)))
    elif filesize > 10000:
        print("Uploading %s (%.2f kB)..." % (filename, (filesize / 1000)))
    else:
        print("Uploading %s (%.2f bytes)..." % (filename, filesize))
        
    try:
        f = m.upload(filename)
        if public:
            print("%s uploaded and now available at: %s" % 
                (filename, m.get_upload_link(f)))
        else:
            print("%s uploaded" % filename)

        return True

    except:
        # Note: the correct behavior here should be "try the upload again, dummy."
        # Either "save" the file for later or try again (maybe give up after 3 
        # consecutive failures?)
        print("Error: sorry, it was not possible to upload %s." % filename)
        return False


def main():
    if len(sys.argv) == 1:
        helper()
        sys.exit(1)

    # Scan config file for credentials.
    credentials = getcreds()
    username = credentials[0]
    password = credentials[1]

    parse()

    # Count of files
    count = 0

    # Hold any files that could not be uploaded.
    failures = []

    # Perform login with the credentials supplied in the config
    mega = Mega()
    m = login(mega, username, password)
    filecount = len(FILES)

    for item in FILES:
        count += 1
        print("[%s of %s]" % (count, filecount))

        trial = 1
        success = False

        # Try to upload a file 3 times, then skip.
        while not success:
            success = upload(m, item, public = PUBLIC)
            if not success:
                if trial <= 3:
                    trial += 1
                    print("Retrying upload. Try #%s..." % trial)
                else:
                    print("FAIL: skipping %s after 3 failures." % item)
                    failures.append(item)
            
    if len(failures) > 0:
        # Suggestion: write these to a log file instead of terminal?
        print("The following files could not be uploaded:")
        for item in failures:
            print(item)

    sys.exit(0)


if __name__ == "__main__":
    main()
